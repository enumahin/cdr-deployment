services:
  db:
    image: mysql:8.0
    container_name: patient-db
    restart: always
    ports:
      - "3316:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${ALIEN_DB_PW}
      MYSQL_USER: alienworkspace
      MYSQL_PASSWORD: ${ALIEN_DB_PW}
    volumes:
      - ./init/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot"]
      interval: 5s
      retries: 5
      timeout: 5s
    extends:
      file: common-config.yml
      service: network-base-config

  cdr-cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cdr-cloudflared
    restart: unless-stopped
    command: tunnel --no-autoupdate run
    extends:
      file: common-config.yml
      service: network-base-config
    environment:
      - "TUNNEL_TOKEN=${CDR_CONFIGSERVER_TUNNEL_TOKEN}"

  redis:
    image: redis
    container_name: cdr-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      retries: 10
      timeout: 5s
      start_period: 10s
    extends:
      file: common-config.yml
      service: network-base-config

  rabbit:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      retries: 10
      timeout: 5s
      start_period: 10s
    extends:
      file: common-config.yml
      service: network-base-config

  configserver:
    image: enumahin/cdr-configserver:0.0.3.SNAPSHOT
    container_name: configserver
    ports:
      - "8071:8071"
    healthcheck:
      test: "curl --fail --silent http://localhost:8071/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      retries: 10
      timeout: 30s
      start_period: 30s
    depends_on:
      rabbit:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: rabbit-network-base-config

  eurekaserver:
    image: enumahin/cdr-service-discovery:0.0.1-SNAPSHOT
    container_name: eurekaserver
    ports:
      - "8761:8761"
    healthcheck:
      test: "curl --fail --silent http://localhost:8761/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      retries: 10
      timeout: 30s
      start_period: 30s
    depends_on:
      configserver:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: configserver-base-config
    environment:
      - SPRING_APPLICATION_NAME=eurekaserver

  read:
    image: grafana/loki:latest
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      cdr-network:
        aliases:
          - loki

  write:
    image: grafana/loki:latest
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  alloy:
    image: grafana/alloy:latest
    volumes:
      - ./loki/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 12345:12345
    depends_on:
      - gateway
    networks:
      - cdr-network

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./loki/.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    networks:
      - cdr-network

  prometheus:
    image: prom/prometheus:v2.45.6
    container_name: prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9090/ || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cdr-network

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cdr-network

  backend:
    image: grafana/loki:latest
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/config.yaml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    networks:
      - cdr-network

  gateway:
    image: nginx:latest
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cdr-network

  gatewayserver:
    image: enumahin/cdr-edge-gateway-server:0.0.1-SNAPSHOT
    container_name: gatewayserver
    ports:
      - "9191:9191"
    depends_on:
      metadata:
        condition: service_healthy
      demographic:
        condition: service_healthy
      patient:
        condition: service_healthy
      redis:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: eureka-configserver-config
    environment:
      - SPRING_APPLICATION_NAME=gatewayserver
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eurekaserver:8761/eureka
      - SPRING_DATA_REDIS_CONNECTION-TIMEOUT=2s
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_DATA_REDIS_TIMEOUT=1s

  metadata:
    image: enumahin/metadata-microservice:0.0.4.SNAPSHOT
    container_name: metadata-ms
    ports:
      - "8010:8010"
    healthcheck:
      test: "curl --fail --silent http://localhost:8010/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      retries: 10
      timeout: 50s
      start_period: 30s
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/metadata
      SPRING_APPLICATION_NAME: "metadata"
    extends:
      file: common-config.yml
      service: microservice-base-config

  patient:
    image: enumahin/patient-microservice:0.0.4.SNAPSHOT
    container_name: patient-ms
    ports:
      - "8030:8030"
    healthcheck:
      test: "curl --fail --silent http://localhost:8030/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      retries: 10
      timeout: 50s
      start_period: 30s
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/patient
      SPRING_APPLICATION_NAME: "patient"
    extends:
      file: common-config.yml
      service: microservice-base-config

  demographic:
    image: enumahin/demographic-microservice:0.0.4.SNAPSHOT
    container_name: demographic-ms
    ports:
      - "8020:8020"
    healthcheck:
      test: "curl --fail --silent http://localhost:8020/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      retries: 10
      timeout: 50s
      start_period: 30s
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/demographic
      SPRING_APPLICATION_NAME: "demographic"
    extends:
      file: common-config.yml
      service: microservice-base-config

networks:
  cdr-network:
    driver: bridge
